"use client";

import React, { useState, useEffect, useRef } from "react";
import Calendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin from "@fullcalendar/interaction";
import "@fullcalendar/core/locales/vi";
import { DatePickerComponent } from "./DatePickerComponent";
import { Button } from "@/components/ui/button";
import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { fetchHolidays, HolidayEvent } from "@/service/CalendarService";
import { Task } from "@/service/TaskService";
import FullCalendar from "@fullcalendar/react";

interface CalendarComponentProps {
  tasks: Task[];
}

const CalendarComponent: React.FC<CalendarComponentProps> = ({ tasks }) => {
  const [calendarEvents, setCalendarEvents] = useState<HolidayEvent[]>([]);
  const [newEventTitle, setNewEventTitle] = useState("");
  const [selectedDate, setSelectedDate] = useState<string>("");
  const accessToken = localStorage.getItem("accessToken");
  const calendarRef = useRef<Calendar | null>(null);

  // L·∫•y m√†u s·∫Øc theo m·ª©c ƒë·ªô ∆∞u ti√™n
  const getPriorityColor = (priority: string, completed: string) => {
    if (completed) return "#9CA3AF"; // X√°m cho task ho√†n th√†nh
    return priority === "Cao"
      ? "#EF4444"
      : priority === "Trung b√¨nh"
      ? "#F59E0B"
      : "#10B981";
  };

  useEffect(() => {
    if (tasks.length > 0) {
      setCalendarEvents(
        tasks.map((task) => ({
          id: task.taskId.toString(),
          title: task.title,
          start: task.dueDate,
          color: getPriorityColor(task.priority, task.status),
          description: task.description,
          assignee: task.assignee,
        }))
      );
    }
  }, [tasks]);

  useEffect(() => {
    const loadHolidays = async () => {
      if (accessToken) {
        const holidays = await fetchHolidays(accessToken);
        setCalendarEvents((prev) => [...prev, ...holidays]);
      } else {
        console.error("L·ªói: Kh√¥ng t√¨m th·∫•y access token!");
      }
    };

    loadHolidays();
  }, []);

  const addEvent = () => {
    if (newEventTitle && selectedDate) {
      const newEvent = {
        id: (calendarEvents.length + 1).toString(),
        title: newEventTitle,
        start: selectedDate,
        color: "#3B82F6",
        description: "S·ª± ki·ªán m·ªõi",
      };
      setCalendarEvents([...calendarEvents, newEvent]);
      setNewEventTitle("");
      setSelectedDate("");
    }
  };

  const handleViewChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const newView = event.target.value;
    if (calendarRef.current) {
      calendarRef.current.getApi().changeView(newView);
    }
  };

  return (
    <div className="p-6 bg-white dark:bg-gray-900 shadow-lg rounded-lg">
      <div className="flex justify-between items-center mb-4">
        <Dialog>
          <DialogTrigger asChild>
            <Button variant="default">Th√™m s·ª± ki·ªán</Button>
          </DialogTrigger>
          <DialogContent className="p-4 space-y-4">
            <h3 className="text-lg font-semibold">T·∫°o S·ª± Ki·ªán M·ªõi</h3>
            <Input
              type="text"
              placeholder="Nh·∫≠p ti√™u ƒë·ªÅ s·ª± ki·ªán"
              value={newEventTitle}
              onChange={(e) => setNewEventTitle(e.target.value)}
            />
            <DatePickerComponent
              onDateSelect={(date: Date) =>
                setSelectedDate(date.toLocaleDateString("sv-SE"))
              }
            />
            <Button onClick={addEvent} className="w-full">
              Th√™m
            </Button>
          </DialogContent>
        </Dialog>
        <select
          className="border rounded-md p-1"
          onChange={handleViewChange}
          defaultValue="dayGridMonth"
        >
          <option value="dayGridMonth">Th√°ng</option>
          <option value="timeGridWeek">Tu·∫ßn</option>
          <option value="timeGridDay">Ng√†y</option>
        </select>
      </div>

      <FullCalendar
        ref={calendarRef}
        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
        initialView="dayGridMonth"
        events={calendarEvents}
        eventContent={(eventInfo) => (
          <div className="flex items-center w-full p-1">
            {/* Thanh m√†u b√™n tr√°i gi·ªëng Google Calendar */}
            <div
              className="w-1 h-full mr-2 rounded"
              style={{
                backgroundColor: eventInfo.event.backgroundColor,
              }}
            />
            <div className="flex-1 overflow-hidden">
              {/* Ti√™u ƒë·ªÅ task */}
              <div className="text-xl font-semibold text-gray-900 dark:text-gray-100 truncate">
                {eventInfo.event.title}
              </div>

              {/* M√¥ t·∫£ task */}
              {/* <div className="text-sm text-gray-700 dark:text-gray-400 mt-1 truncate">
                {eventInfo.event.extendedProps.description}
              </div> */}

              {/* Ng∆∞·ªùi th·ª±c hi·ªán task */}
              <div className="text-xs text-gray-500 dark:text-gray-300 mt-1 truncate">
                <span className="font-semibold">üë§</span>
                {eventInfo.event.extendedProps.assignee}
              </div>

              {/* Th·ªùi gian (n·∫øu c√≥) */}
              <div className="text-xs text-gray-500 dark:text-gray-300 mt-1 truncate">
                <span className="font-semibold">‚åö </span>
                {(() => {
                  const rawDate = eventInfo.event.extendedProps.start;
                  if (!rawDate) return "Kh√¥ng c√≥ th·ªùi gian"; // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

                  const date = new Date(rawDate);
                  if (isNaN(date.getTime())) return "Ng√†y kh√¥ng h·ª£p l·ªá"; // Ki·ªÉm tra n·∫øu ng√†y b·ªã l·ªói

                  const hours = date.getHours().toString().padStart(2, "0");
                  const minutes = date.getMinutes().toString().padStart(2, "0");

                  return `${hours}:${minutes}`;
                })()}
              </div> 
            </div>
          </div>
        )}
        headerToolbar={{
          left: "prev,next today",
          center: "title",
          right: "",
        }}
        height="auto"
        timeZone="Asia/Ho_Chi_Minh"
        locale="vi"
        eventDisplay="block" // ƒê·∫£m b·∫£o s·ª± ki·ªán hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng kh·ªëi
        eventTextColor="#000000" // M√†u ch·ªØ ƒëen ƒë·ªÉ t∆∞∆°ng ph·∫£n v·ªõi n·ªÅn
      />
    </div>
  );
};

export default CalendarComponent;
